<%! func ManifestTmpl(w io.Writer, config Config) error %>
<%% import . "github.com/compozed/travel-agent/models" %%>
---

meta:
  pipeline:
    uri: https://github.com/jvikes11/windows-stemcell-ta-builder.git

groups:
- name: all
  jobs:
  - create-base-image
  - create-stemcell

jobs:
<% if config.HasFeature("slack_updates") { %>
- name: stemcells-windows-server-updates
  plan:
  - get: stemcells-windows-server
    params:
      globs: []
    trigger: true
    on_success:
      put: notify
      params:
        channel:  (( grab meta.slack_updates.channel ))
        username: (( grab meta.slack_updates.username ))
        icon_url: (( grab meta.slack_updates.icon_url ))
        text: "New <%= config.Name %> tile available"
<% } %>

- name: create-base-image
  serial: true
  public: true
  plan:
  - aggregate:
    - get: windows-core-iso
    - get: base-floppy-img
    - get: config
    - get: pipeline
  - task: deploy-base-image
    file: pipeline/ci/tasks/deploy-base-image.yml
    params:
      GOVC_URL:           (( grab meta.govc_url ))
      GOVC_INSECURE:      (( grab meta.govc_insecure ))
      GOVC_USERNAME:      (( grab meta.govc_username ))
      GOVC_PASSWORD:      (( grab meta.govc_password ))
      GOVC_DATACENTER:    (( grab meta.govc_datacenter ))
      GOVC_DATASTORE:     (( grab meta.govc_datastore ))
      GOVC_RESOURCE_POOL: (( grab meta.govc_resource_pool ))
      GOVC_FOLDER:        (( grab meta.govc_folder ))
      GOVC_HOST:          (( grab meta.govc_host ))
      GOVC_GUEST_OS:      (( grab meta.govc_guest_os ))
      GOVC_NUM_CPU:       (( grab meta.govc_num_cpu ))
      GOVC_MEMORY_MB:     (( grab meta.govc_memory_mb ))
      GOVC_DISK_GB:       (( grab meta.govc_disk_gb ))
      GOVC_NETWORK:       (( grab meta.govc_network ))
      GOVC_VM_NAME:       (( grab meta.govc_vm_name ))

      OS_NAME:            (( grab meta.os_name ))
      VM_IP:              (( grab meta.vm_ip ))
      VM_ADMIN_USERNAME:  (( grab meta.vm_admin_username ))
      VM_ADMIN_PASSWORD:  (( grab meta.vm_admin_password ))

      MSI_DOWNLOAD_URL:   (( grab meta.msi_download_url ))

      DEBUG:              (( grab meta.debug || false ))

- name: create-stemcell
  serial: true
  public: true
  plan:
  - aggregate:
    - get: config
    - get: pipeline
    - get: lgpo-zip
    - get: stembuild
      resource: stemcells-windows-server
      params:
        globs:
        - "*linux*2019.5*"
  - task: deploy-windows-stemcell
    file: pipeline/ci/tasks/deploy-windows-stemcell.yml
    params:
      GOVC_URL:              (( grab meta.govc_url ))
      GOVC_INSECURE:         (( grab meta.govc_insecure ))
      GOVC_USERNAME:         (( grab meta.govc_username ))
      GOVC_PASSWORD:         (( grab meta.govc_password ))
      GOVC_DATACENTER:       (( grab meta.govc_datacenter ))
      GOVC_FOLDER:           (( grab meta.govc_folder ))
      GOVC_VM_NAME:          (( grab meta.govc_vm_name ))
      VM_IP:                 (( grab meta.vm_ip ))
      VM_ADMIN_USERNAME:     (( grab meta.vm_admin_username ))
      VM_ADMIN_PASSWORD:     (( grab meta.vm_admin_password ))
      DEBUG:                 (( grab meta.debug || false ))
  - put: stemcell
    params:
      file: "./build/bosh-stemcell*.tgz"


resources:
- name: stemcells-windows-server
  type: pivnet
  source:
    api_token:    (( grab meta.pivnet_token ))
    product_slug: (( grab meta.product_slug ))
    sort_by: semver

- name: pipeline
  type: git
  source:
    branch:      (( grab meta.pipeline.branch || "master" ))
    uri:         (( grab meta.pipeline.uri ))

- name: config
  type: git
  source:
    paths:
    - default/<%= config.Name %>
    branch:      (( grab meta.configs.branch || "master" ))
    private_key: (( grab meta.configs.private_key ))
    uri:         (( grab meta.configs.uri ))

<% if config.HasFeature("slack_updates") { %>
- name: notify
  type: slack-notification
  source:
    url: (( grab meta.slack_updates.uri || "" ))
<% } %>

- name: windows-core-iso
  type: file-url
  source:
    url: (( grab meta.artifactory.iso_url ))
    filename: windows-core-iso.iso

- name: base-floppy-img
  type: file-url
  source:
    url: (( grab meta.artifactory.img_url ))
    filename: base-floppy.img

- name: lgpo-zip
  type: file-url
  source:
    url: ((grab meta.lgpo_zip_url ))
    filename: LGPO.zip

- name: stemcell
  type: artifactory
  source:
    endpoint:   (( grab meta.artifactory.endpoint ))
    repository: (( grab meta.artifactory.repository ))
    username:   (( grab meta.artifactory.username ))
    password:   (( grab meta.artifactory.password ))
    regex: "bosh-stemcell-(?<version>.*)-vsphere-esxi-*-go_agent.tgz"

resource_types:
- name: pivnet
  type: docker-image
  source:
    repository: pivotalcf/pivnet-resource
    tag: latest-final

- name: file-url
  type: docker-image
  source:
    repository: pivotalservices/concourse-curl-resource
    tag: latest

- name: artifactory
  type: docker-image
  source:
    repository: pivotalservices/artifactory-resource
